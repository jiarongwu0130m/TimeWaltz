// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(TimeWaltzContext))]
    [Migration("20240320065244_AddDepartmentProp")]
    partial class AddDepartmentProp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccessRole", b =>
                {
                    b.Property<int>("AccessId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccessId", "RoleId");

                    b.ToTable("AccessRole");
                });

            modelBuilder.Entity("AccessRoleBind", b =>
                {
                    b.Property<int>("AccessId")
                        .HasColumnType("int")
                        .HasColumnName("AccessID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("AccessId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccessRoleBind", (string)null);
                });

            modelBuilder.Entity("AgentEmployee", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<int>("AgentEmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("AgentEmployeesID");

                    b.HasKey("EmployeesId", "AgentEmployeesId");

                    b.HasIndex("AgentEmployeesId");

                    b.ToTable("AgentEmployees", (string)null);
                });

            modelBuilder.Entity("EmployeeEmployee", b =>
                {
                    b.Property<int>("AgentEmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("AgentEmployeesId", "EmployeesId");

                    b.ToTable("EmployeeEmployee");
                });

            modelBuilder.Entity("Repository.Models.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("Repository.Models.AdditionalClockIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdditionalTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ApprovalEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalEmployeeID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AdditionalClockIn");
                });

            modelBuilder.Entity("Repository.Models.Approval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Remark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("TableID");

                    b.Property<int>("TableType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Approval");
                });

            modelBuilder.Entity("Repository.Models.Billboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PathRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Billboard");
                });

            modelBuilder.Entity("Repository.Models.Clock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Clock");
                });

            modelBuilder.Entity("Repository.Models.CompLeave", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("CompMin")
                        .HasColumnType("int");

                    b.Property<int>("OvertimeId")
                        .HasColumnType("int")
                        .HasColumnName("OvertimeID");

                    b.HasKey("Id")
                        .HasName("PK_CompRequest");

                    b.HasIndex("OvertimeId");

                    b.ToTable("CompLeave");
                });

            modelBuilder.Entity("Repository.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Repository.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeesNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShiftScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftScheduleID");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftScheduleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Repository.Models.Flextime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlexibleTime")
                        .HasColumnType("int");

                    b.Property<bool?>("MoveUp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.HasKey("Id");

                    b.ToTable("Flextime");
                });

            modelBuilder.Entity("Repository.Models.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("AgentEmployeeID");

                    b.Property<int>("ApprovalEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalEmployeeID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FileRoute")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("LeaveMinutes")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("VacationDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("VacationDetailsID");

                    b.HasKey("Id");

                    b.HasIndex("AgentEmployeeId");

                    b.HasIndex("ApprovalEmployeeId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("VacationDetailsId");

                    b.ToTable("LeaveRequest");
                });

            modelBuilder.Entity("Repository.Models.OvertimeApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalEmployeeID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_OvertiomeApplication");

                    b.HasIndex("EmployeesId");

                    b.ToTable("OvertimeApplication");
                });

            modelBuilder.Entity("Repository.Models.PublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PublicHoliday");
                });

            modelBuilder.Entity("Repository.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("TableID");

                    b.Property<int>("TableType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("Repository.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Repository.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<int>("ShiftScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftScheduleID");

                    b.Property<DateTime>("ShiftsDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("ShiftScheduleId");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Repository.Models.ShiftSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxAdditionalClockIn")
                        .HasColumnType("int");

                    b.Property<string>("ShiftsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ShiftSchedule");
                });

            modelBuilder.Entity("Repository.Models.SpecialGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("ServiceLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpecialGrade");
                });

            modelBuilder.Entity("Repository.Models.SpecialHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HowToGive")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpecialHoliday");
                });

            modelBuilder.Entity("Repository.Models.SpecialHolidayDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableDays")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SpecialHolidayDays");
                });

            modelBuilder.Entity("Repository.Models.SpecialVacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("SpecialVacationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SpecialVacation");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<bool>("Stop")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Repository.Models.UserOfAdmin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserOfAdmin");
                });

            modelBuilder.Entity("Repository.Models.VacationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MinVacationHours")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VacationDetails");
                });

            modelBuilder.Entity("AccessRoleBind", b =>
                {
                    b.HasOne("Repository.Models.Access", null)
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessRoleBind_Access");

                    b.HasOne("Repository.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessRoleBind_Role");
                });

            modelBuilder.Entity("AgentEmployee", b =>
                {
                    b.HasOne("Repository.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("AgentEmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentEmployees_Employees1");

                    b.HasOne("Repository.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentEmployees_Employees");
                });

            modelBuilder.Entity("Repository.Models.AdditionalClockIn", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("AdditionalClockIns")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalClockIn_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repository.Models.Billboard", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("Billboards")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Billboard_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repository.Models.Clock", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("Clocks")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Clock_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repository.Models.CompLeave", b =>
                {
                    b.HasOne("Repository.Models.OvertimeApplication", "Overtime")
                        .WithMany("CompLeaves")
                        .HasForeignKey("OvertimeId")
                        .IsRequired()
                        .HasConstraintName("FK_CompLeave_OvertimeApplication");

                    b.Navigation("Overtime");
                });

            modelBuilder.Entity("Repository.Models.Employee", b =>
                {
                    b.HasOne("Repository.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Department");

                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Repository.Models.Employee", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_Employees");

                    b.HasOne("Repository.Models.ShiftSchedule", "ShiftSchedule")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftScheduleId")
                        .HasConstraintName("FK_Employees_ShiftSchedule");

                    b.Navigation("Department");

                    b.Navigation("ShiftSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.LeaveRequest", b =>
                {
                    b.HasOne("Repository.Models.Employee", "AgentEmployee")
                        .WithMany("LeaveRequestAgentEmployees")
                        .HasForeignKey("AgentEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees1");

                    b.HasOne("Repository.Models.Employee", "ApprovalEmployee")
                        .WithMany("LeaveRequestApprovalEmployees")
                        .HasForeignKey("ApprovalEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees2");

                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("LeaveRequestEmployees")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees");

                    b.HasOne("Repository.Models.VacationDetail", "VacationDetails")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("VacationDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_VacationDetails");

                    b.Navigation("AgentEmployee");

                    b.Navigation("ApprovalEmployee");

                    b.Navigation("Employees");

                    b.Navigation("VacationDetails");
                });

            modelBuilder.Entity("Repository.Models.OvertimeApplication", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("OvertimeApplications")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_OvertimeApplication_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repository.Models.Shift", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employees")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Shift_Employees");

                    b.HasOne("Repository.Models.ShiftSchedule", "ShiftSchedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Shift_ShiftSchedule");

                    b.Navigation("Employees");

                    b.Navigation("ShiftSchedule");
                });

            modelBuilder.Entity("Repository.Models.SpecialHolidayDays", b =>
                {
                    b.HasOne("Repository.Models.Employee", "Employee")
                        .WithMany("SpecialHolidayDays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.HasOne("Repository.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Models.UserOfAdmin", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("UserOfAdmin")
                        .HasForeignKey("Repository.Models.UserOfAdmin", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserOfAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repository.Models.Employee", b =>
                {
                    b.Navigation("AdditionalClockIns");

                    b.Navigation("Billboards");

                    b.Navigation("Clocks");

                    b.Navigation("LeaveRequestAgentEmployees");

                    b.Navigation("LeaveRequestApprovalEmployees");

                    b.Navigation("LeaveRequestEmployees");

                    b.Navigation("OvertimeApplications");

                    b.Navigation("Shifts");

                    b.Navigation("SpecialHolidayDays");
                });

            modelBuilder.Entity("Repository.Models.OvertimeApplication", b =>
                {
                    b.Navigation("CompLeaves");
                });

            modelBuilder.Entity("Repository.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repository.Models.ShiftSchedule", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("UserOfAdmin");
                });

            modelBuilder.Entity("Repository.Models.VacationDetail", b =>
                {
                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
