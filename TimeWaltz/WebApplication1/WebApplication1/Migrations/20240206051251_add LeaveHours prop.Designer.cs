// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models.Entity;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(TimeWaltzContext))]
    [Migration("20240206051251_add LeaveHours prop")]
    partial class addLeaveHoursprop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Entity.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Access", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AccessRoleBind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessId")
                        .HasColumnType("int")
                        .HasColumnName("AccessID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessId" }, "IX_AccessRoleBind_AccessID");

                    b.HasIndex(new[] { "RoleId" }, "IX_AccessRoleBind_RoleID");

                    b.ToTable("AccessRoleBind", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AdditionalClockIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdditionalTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ApprovalEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalEmployeeID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApprovalEmployeeId" }, "IX_AdditionalClockIn_ApprovalEmployeeID");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_AdditionalClockIn_EmployeesID");

                    b.ToTable("AdditionalClockIn", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AgentEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentEmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("AgentEmployeesID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.HasKey("Id");

                    b.HasIndex("AgentEmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AgentEmployees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Approval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Remark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("TableID");

                    b.Property<int>("TableType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Approval", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Billboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PathRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_Billboard_EmployeesID");

                    b.ToTable("Billboard", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Clock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_Clock_EmployeesID");

                    b.ToTable("Clock", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.CompRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompMin")
                        .HasColumnType("int");

                    b.Property<int>("OvertimeId")
                        .HasColumnType("int")
                        .HasColumnName("OvertimeID");

                    b.Property<int>("VacationDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("VacationDetailsID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OvertimeId" }, "IX_CompRequest_OvertimeID");

                    b.HasIndex(new[] { "VacationDetailsId" }, "IX_CompRequest_VacationDetailsID");

                    b.ToTable("CompRequest", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CompanyLocation", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<int>("Hierarchy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Department_DepartmentID");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_Department_EmployeesID");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeesNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShiftScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftScheduleID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShiftScheduleId" }, "IX_Employees_ShiftScheduleID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Flextime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FlexibleTime")
                        .HasColumnType("int");

                    b.Property<bool?>("MoveUp")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Flextime", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("AgentEmployeeID");

                    b.Property<int>("ApprovalEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovalEmployeeID");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FileRoute")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("LeaveHours")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("VacationDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("VacationDetailsID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgentEmployeeId" }, "IX_LeaveRequest_AgentEmployeeID");

                    b.HasIndex(new[] { "ApprovalEmployeeId" }, "IX_LeaveRequest_ApprovalEmployeeID");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_LeaveRequest_EmployeesID");

                    b.HasIndex(new[] { "VacationDetailsId" }, "IX_LeaveRequest_VacationDetailsID");

                    b.ToTable("LeaveRequest", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.OvertiomeApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalEmployee")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_OvertiomeApplication_EmployeesID");

                    b.ToTable("OvertiomeApplication", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.PublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PublicHoliday", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("TableID");

                    b.Property<int>("TableType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequestStatus", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<int>("MaxAdditionalClockIn")
                        .HasColumnType("int");

                    b.Property<int>("ShiftScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ShiftScheduleID");

                    b.Property<DateTime>("ShiftsDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_Shift_EmployeesID");

                    b.HasIndex(new[] { "ShiftScheduleId" }, "IX_Shift_ShiftScheduleID");

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.ShiftSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreakTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShiftsName")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ShiftSchedule", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.SpacialVacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("SpacialVacationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SpacialVacation", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("EmployeesId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeesID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PasswordDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Stop")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_User_DepartmentID");

                    b.HasIndex(new[] { "EmployeesId" }, "IX_User_EmployeesID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.UserRoleBind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRoleBind_RoleID");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoleBind_UserID");

                    b.ToTable("UserRoleBind", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.VacationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinVacationDays")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VacationDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AccessRoleBind", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Access", "Access")
                        .WithMany("AccessRoleBinds")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessRoleBind_Access");

                    b.HasOne("WebApplication1.Models.Entity.Role", "Role")
                        .WithMany("AccessRoleBinds")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessRoleBind_Role");

                    b.Navigation("Access");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AdditionalClockIn", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "ApprovalEmployee")
                        .WithMany("AdditionalClockInApprovalEmployees")
                        .HasForeignKey("ApprovalEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalClockIn_Employees1");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("AdditionalClockInEmployees")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AdditionalClockIn_Employees");

                    b.Navigation("ApprovalEmployee");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.AgentEmployee", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "AgentEmployees")
                        .WithMany("AgentEmployeeAgentEmployees")
                        .HasForeignKey("AgentEmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentEmployees_Employees1");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("AgentEmployeeEmployees")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_AgentEmployees_Employees");

                    b.Navigation("AgentEmployees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Billboard", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("Billboards")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Billboard_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Clock", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("Clocks")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Clock_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.CompRequest", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.OvertiomeApplication", "Overtime")
                        .WithMany("CompRequests")
                        .HasForeignKey("OvertimeId")
                        .IsRequired()
                        .HasConstraintName("FK_CompRequest_OvertiomeApplication");

                    b.HasOne("WebApplication1.Models.Entity.VacationDetail", "VacationDetails")
                        .WithMany("CompRequests")
                        .HasForeignKey("VacationDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_CompRequest_VacationDetails");

                    b.Navigation("Overtime");

                    b.Navigation("VacationDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Department", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Department", "DepartmentNavigation")
                        .WithMany("InverseDepartmentNavigation")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Department_Department");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("Departments")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Department_Employees");

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Employee", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.ShiftSchedule", "ShiftSchedule")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_ShiftSchedule");

                    b.Navigation("ShiftSchedule");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.LeaveRequest", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "AgentEmployee")
                        .WithMany("LeaveRequestAgentEmployees")
                        .HasForeignKey("AgentEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees1");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "ApprovalEmployee")
                        .WithMany("LeaveRequestApprovalEmployees")
                        .HasForeignKey("ApprovalEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees2");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("LeaveRequestEmployees")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_Employees");

                    b.HasOne("WebApplication1.Models.Entity.VacationDetail", "VacationDetails")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("VacationDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveRequest_VacationDetails");

                    b.Navigation("AgentEmployee");

                    b.Navigation("ApprovalEmployee");

                    b.Navigation("Employees");

                    b.Navigation("VacationDetails");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.OvertiomeApplication", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("OvertiomeApplications")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_OvertiomeApplication_Employees");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Shift", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_Shift_Employees");

                    b.HasOne("WebApplication1.Models.Entity.ShiftSchedule", "ShiftSchedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Shift_ShiftSchedule");

                    b.Navigation("Employees");

                    b.Navigation("ShiftSchedule");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.User", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("WebApplication1.Models.Entity.Employee", "Employees")
                        .WithMany("Users")
                        .HasForeignKey("EmployeesId")
                        .HasConstraintName("FK_User_Employees");

                    b.Navigation("Department");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.UserRoleBind", b =>
                {
                    b.HasOne("WebApplication1.Models.Entity.Role", "Role")
                        .WithMany("UserRoleBinds")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleBind_Role");

                    b.HasOne("WebApplication1.Models.Entity.User", "User")
                        .WithMany("UserRoleBinds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleBind_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Access", b =>
                {
                    b.Navigation("AccessRoleBinds");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Department", b =>
                {
                    b.Navigation("InverseDepartmentNavigation");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Employee", b =>
                {
                    b.Navigation("AdditionalClockInApprovalEmployees");

                    b.Navigation("AdditionalClockInEmployees");

                    b.Navigation("AgentEmployeeAgentEmployees");

                    b.Navigation("AgentEmployeeEmployees");

                    b.Navigation("Billboards");

                    b.Navigation("Clocks");

                    b.Navigation("Departments");

                    b.Navigation("LeaveRequestAgentEmployees");

                    b.Navigation("LeaveRequestApprovalEmployees");

                    b.Navigation("LeaveRequestEmployees");

                    b.Navigation("OvertiomeApplications");

                    b.Navigation("Shifts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.OvertiomeApplication", b =>
                {
                    b.Navigation("CompRequests");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.Role", b =>
                {
                    b.Navigation("AccessRoleBinds");

                    b.Navigation("UserRoleBinds");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.ShiftSchedule", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.User", b =>
                {
                    b.Navigation("UserRoleBinds");
                });

            modelBuilder.Entity("WebApplication1.Models.Entity.VacationDetail", b =>
                {
                    b.Navigation("CompRequests");

                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
