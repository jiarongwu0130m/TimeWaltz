@{
    ViewBag.title = "加班申請單";
}

<div class="secion mt-2" id="app">
    <div class="card">
        <div class="card-header">

            <h3 class="card-title d-flex justify-content-between">
                <span>加班申請</span>
            </h3>

        </div>
        <div class="card-body">
            <div class="row form-group basic">
                <label class="col-form-label">申請人</label>
                <input type="text" class="form-control" v-model="name" readonly>

                <i class="clear-input">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </i>
            </div>
            <div class="row form-group basic">
                <label class="col-form-label">加班期間</label>
                <input id="timeRange" name="dateRange" type="datetime" class="form-control" value="" autocomplete="off">
                <i class="clear-input">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </i>
                <span class="text-danger font-weight-bold col-form-label" v-if="!dataValid.overtimeResult">請選擇加班期間</span>
            </div>
            <template v-if="isValid(startTime)">
                <div class="row form-group basic">
                    <div class="chip chip-media">
                        <i class="chip-icon bg-warning">
                            <ion-icon name="alarm" role="img" class="md hydrated" aria-label="alarm"></ion-icon>
                        </i>
                        <span class="chip-label">加班時數：{{ overtimeResult }}</span>
                    </div>
                </div>
            </template>
            <div class="row form-group basic">
                <div class="custom-control custom-checkbox mb-1">
                    <input type="checkbox" class="custom-control-input" id="ovetimeCheck" v-model="status">
                    <label class="custom-control-label" for="ovetimeCheck">加班轉補休</label>
                </div>
            </div>
            <div class="row form-group basic">
                <label class="col-form-label">加班原因</label>
                <textarea class="form-control" rows="3"
                          control-id="ControlID-13" v-model="reason"></textarea>
                <i class="clear-input">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </i>
                <span class="text-danger font-weight-bold" v-if="!dataValid.reason">請說明加班原因</span>
            </div>
        </div>
        <div class="card-footer">
            <div class="row justify-content-around">
                <button type="button" class="btn btn-facebook" @@click="checkAllData">
                    <ion-icon name="checkmark-done-outline" role="img"
                              class="md hydrated" aria-label="checkmark done outline"></ion-icon>送出
                </button>
                <button type="button" class="btn btn-dribbble" @@click="toList">
                    <ion-icon name="close-outline" role="img"
                              class="md hydrated" aria-label="close outline"></ion-icon>瀏覽單據
                </button>
            </div>
        </div>
    </div>


    <div class="modal fade dialogbox" id="DialogIconedSuccess" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-success">
                    <ion-icon name="checkmark-circle" role="img" class="md hydrated" aria-label="checkmark circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出成功</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="successBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedDanger" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-danger">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出失敗</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="dangerBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>
    <script>
        Vue.createApp({
            data() {
                return {
                    employeeId:'',
                    name: '',
                    startTime: '',
                    endTime: '',
                    overtimeResult: '',
                    status: false,
                    reason: '',
                    dataValid: {
                        overtimeResult: true,
                        reason: true,
                    }
                }
            },
            methods: {
                getEmpName() {
                    let self = this;
                    axios("/mobile/api/Overtime/GetEmployeeName").then(response => {
                        self.employeeId = response.data.employeeId;
                        self.name = response.data.employeeName;
                    });
                },
                getDateTimeRange() {
                    let self = this;
                    $('#timeRange').daterangepicker({
                        "startDate": this.getToday(),
                        "endDate": this.getToday(),
                        timePicker: true,
                        timePickerIncrement: 15,
                        locale: {
                            format: 'YYYY-MM-DD HH:mm'
                        }
                    },
                        function (start, end, _) {
                            self.startTime = start;
                            self.endTime = end;
                            self.countOvertimeMins();
                        });
                },
                getToday() {
                    return moment().format("YYYY-MM-DD HH:mm")
                },
                countOvertimeMins() {
                    let self = this;
                    self.overtimeResult = '';
                    if (self.startTime && self.endTime) {
                        const start = self.startTime;
                        const end = self.endTime;
                        const durationmilliseconds = end - start;
                        const durationminutes = Math.floor(durationmilliseconds / (60 * 1000));
                        const hours = Math.floor(durationminutes / 60);
                        const minutes = durationminutes % 60;
                        if (hours === 0) {
                            self.overtimeResult = `${minutes} 分鐘`;
                        } else if (minutes === 0) {
                            self.overtimeResult = `${hours} 小時`;
                        } else {
                            self.overtimeResult = `${hours} 小時 ${minutes} 分鐘`;
                        }
                    } else {
                        self.overtimeResult = '';
                    }
                },
                isValid(string) {
                    const isValidData = Date.parse(string);
                    return !isNaN(isValidData);
                },
                checkAllData() {
                    let self = this;
                    self.dataValid.overtimeResult = self.overtimeResult == '' ? false : true;
                    self.dataValid.reason = self.reason == '' ? false : true;
                    if (self.dataValid.overtimeResult && self.dataValid.reason) {
                        self.sendOvertimeRequest();
                    }
                },
                sendOvertimeRequest() {
                    let self = this;
                    self.startTime = self.startTime.utc(true).toISOString();
                    self.endTime = self.endTime.utc(true).toISOString();
                    axios.post("/mobile/api/Overtime/RequestCreate", {
                        employeeId: self.employeeId,
                        startTime: self.startTime,
                        endTime : self.endTime,
                        status : self.status,
                        reason : self.reason,
                    }).then(response => {
                        if (response.data == true) {
                            $('#DialogIconedSuccess').modal('show');
                            $('#successBack').click(function () {
                                $('#DialogIconedSuccess').modal('hide');
                                window.location.href = "/employee/query/Overtime";
                            });
                        } else {
                            $('#DialogIconedDanger').modal('show');
                            $('#dangerBack').click(function () {
                                $('#DialogIconedDanger').modal('hide');
                            });
                        }
                    });
                },
            },
            mounted() {
                this.getEmpName();
                this.getDateTimeRange();
            },
        }).mount("#app");
    </script>
}


@* <div class="secion mt-2">
    <div class="card">
        <form method="post">
            <div class="card-header">

                <h3 class="card-title d-flex justify-content-between">
                    <span>加班申請</span>
                </h3>

            </div>
            <div class="card-body">

                <div class="row form-group basic">
                    <label class="col-form-label">申請人</label>
                    <input type="text" class="form-control" v-model="name" readonly>

                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

                <div class="row form-group basic">
                    <label class="col-form-label">加班期間</label>
                    <input id="timeRange" name="dateRange" type="datetime" class="form-control" value="" autocomplete="off">
                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

                <template v-if="isValid(startTime)">
                    <div class="row form-group basic">
                        <label class="col-form-label text-green">加班時數：{{ overtimeResult }}</label>
                    </div>
                </template>

                <div class="row form-group basic">
                    <div class="custom-control custom-checkbox mb-1">
                        <input type="checkbox" class="custom-control-input" id="ovetimeCheck" v-model="status">
                        <label class="custom-control-label" for="ovetimeCheck">加班轉補休</label>
                    </div>
                </div>

                <div class="row form-group basic">
                    <label class="col-form-label">加班原因</label>
                    <textarea class="form-control" rows="3"
                              control-id="ControlID-13" v-model="reason"</textarea>
                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

            </div>
            <div class="card-footer">
                <div class="row justify-content-around">
                    <button type="button" class="btn btn-facebook">
                        <ion-icon name="checkmark-done-outline" role="img"
                                  class="md hydrated" aria-label="checkmark done outline"></ion-icon>送出
                    </button>
                    <button type="button" class="btn btn-dribbble" @@click="toList">
                        <ion-icon name="close-outline" role="img"
                                  class="md hydrated" aria-label="close outline"></ion-icon>瀏覽單據
                    </button>
                </div>

            </div>
        </form>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedSuccess" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-success">
                    <ion-icon name="checkmark-circle" role="img" class="md hydrated" aria-label="checkmark circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出成功</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="successBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedDanger" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-danger">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出失敗</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="dangerBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div> *@

@* <div class="secion mt-2">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title d-flex justify-content-between">
                <span>加班申請單</span>
                <label class="border rounded border-success text-success" style="font-size:16px">編輯中
                </label>
            </h3>
        </div>

        <div class="card-body">
            <div class="row form-group basic">
                <label class="col-form-label">申請人：</label>
                <input type="text" class="form-control" v-model="empName" readonly>
                <i class="clear-input">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </i>
            </div>


            <div class="row form-group basic">
                <label class="col-form-label">加班期間：</label>
                <input id="timeRange" type="datetime" class="form-control">
                <span class="text-danger font-weight-bold col-form-label" v-if="!dataValid.overtimeResult">請選擇加班期間</span>
                <i class="clear-input">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </i>
            </div>

            <div class="row form-group basic" v-if="isValid(startTime)">
                <label class="col-form-label text-green">加班時數：{{ overtimeResult }}</label>
            </div>

            <div class="row form-group basic">
                <div class="custom-control custom-checkbox mb-1">
                    <input type="checkbox" class="custom-control-input" id="ovetimeCheck" v-model="status">
                    <label class="custom-control-label" for="ovetimeCheck">加班轉補休</label>
                </div>
            </div>

            <div class="row form-group basic">
                <label class="col-form-label">加班原因：</label>
                <textarea cols="5" rows="5" class="form-control" v-model="reason"></textarea>
                <span class="text-danger font-weight-bold" v-if="!dataValid.reason">請說明加班原因</span>
            </div>
        </div>

        <div class="card-footer">
            <div class="row justify-content-around">
                <button type="button" class="btn btn-facebook" @@click="checkIsValidData">
                    <ion-icon name="checkmark-done-outline"></ion-icon>
                    送出
                </button>
                <button type="button" class="btn btn-dribbble" @@click="toList">
                    <ion-icon name="close-outline"></ion-icon>
                    取消
                </button>
            </div>
        </div>
    </div>
</div> *@

@* @section Scripts {

    <script>
        Vue.createApp({
            data() {
                return {
                    name: '',
                    startTime: '',
                    endTime: '',
                    status: false,
                    reason: '',
                    overtimeResult: '',
                    dataValid: {
                        startTime: true,
                        endTime: true,
                        reason: true,
                        overtimeResult: true,
                    }
                }
            },
            methods: {
                getEmpId() {
                    let self = this;
                    axios("/mobile/api/Overtime/GetEmployeeName").then(response => {
                        concole.log(response);
                    });
                    // fetch("/mobile/api/Overtime/GetEmployeeName").then(res => res.json())
                    //     .then(result => {
                    //         self.empName = result.employeeName;
                    //     })
                },
                toList() {
                    location.href = "/employee/query/Overtime";
                },
                getDateRange() {
                    let self = this;
                    $('#timeRange').daterangepicker({
                        "startDate": self.getToday(),
                        "endDate": self.getToday(),
                        timePickerIncrement: 15,
                        timePicker: true,
                        locale: {
                            format: 'YYYY-MM-DD HH:mm'
                        }
                    },
                        function (start, end, _) {
                            self.startTime = start;
                            self.endTime = end;
                            // self.countOvertimeMins();
                        }
                    );
                },
                getToday() {
                    return moment().format("YYYY-MM-DD HH:mm")
                },
                // getTimeRange() {
                //     let self = this;
                //     var options = {
                //         weekday: 'long',
                //         year: 'numeric',
                //         month: 'long',
                //         day: 'numeric',
                //         hour: 'numeric',
                //         minute: 'numeric',
                //         second: 'numeric'
                //     };

                //     $('#timeRange').daterangepicker({
                //         "startDate": this.getToday(),
                //         "endDate": this.getToday(),
                //         timePicker: true,
                //         timePickerIncrement: 15,
                //         locale: {
                //             format: 'YYYY-MM-DD HH:mm'
                //         }
                //     },
                //         function (start, end, _) {
                //             self.startTime = start;
                //             self.endTime = end;
                //             self.countOvertimeMins();
                //         });
                // },

                // countOvertimeMins() {
                //     let self = this;
                //     self.overtimeResult = '';
                //     if (self.startTime && self.endTime) {
                //         const start = self.startTime;
                //         const end = self.endTime;
                //         const durationMilliseconds = end - start;
                //         const durationMinutes = Math.floor(durationMilliseconds / (60 * 1000));
                //         const hours = Math.floor(durationMinutes / 60);
                //         const minutes = durationMinutes % 60;
                //         if (hours === 0) {
                //             self.overtimeResult = `${minutes} 分鐘`;
                //         } else if (minutes === 0) {
                //             self.overtimeResult = `${hours} 小時`;
                //         } else {
                //             self.overtimeResult = `${hours} 小時 ${minutes} 分鐘`;
                //         }
                //     } else {
                //         self.overtimeResult = '';
                //     }
                // },
                // checkIsValidData() {
                //     let isValid = true;
                //     let self = this;
                //     self.dataValid.overtimeResult = self.overtimeResult == '' ? false : true;
                //     self.dataValid.reason = self.reason == '' ? false : true;
                //     if (self.dataValid.overtimeResult && self.dataValid.reason) {
                //         this.sendOvertimeRequest();
                //     }
                // },
                // sendOvertimeRequest() {
                //     let self = this;
                //     self.startTime = self.startTime.utc(true).toISOString();
                //     self.endTime = self.endTime.utc(true).toISOString();

                //     axios.post("/api/OvertimeApplicationsApi/Create", {
                //         startTime: self.startTime,
                //         endTime: self.endTime,
                //         reason: self.reason,
                //         status: self.status,
                //     }).then(response => {
                //         if (response.data == true) {
                //             Swal.fire({
                //                 icon: "success",
                //                 title: "新增成功!",
                //                 confirmButtonText: '返回',
                //                 showClass: {
                //                     popup: `animate__animated animate__fadeInUp animate__faster`
                //                 },
                //                 hideClass: {
                //                     popup: `animate__animated animate__fadeOutDown animate__faster`
                //                 }
                //             }).then((result) => {
                //                 if (result.value) {
                //                     location.href = "/event/OvertimeRequest";
                //                 }
                //             });
                //         } else {
                //             Swal.fire({
                //                 icon: "error",
                //                 title: "新增失敗!",
                //                 confirmButtonText: '返回',
                //                 showClass: {
                //                     popup: `animate__animated animate__fadeInUp animate__faster`
                //                 },
                //                 hideClass: {
                //                     popup: `animate__animated animate__fadeOutDown animate__faster`
                //                 }
                //             });
                //         }
                //     });
                // },
                // isValid(string) {
                //     const isValidData = Date.parse(string);
                //     return !isNaN(isValidData);
                // },
            },
            mounted() {
                this.getEmpId();
                this.getDateRange();
            }
        }).mount("#app");
    </script>
} *@