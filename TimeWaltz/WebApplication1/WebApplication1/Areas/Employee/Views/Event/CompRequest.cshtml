@{
    ViewBag.title = "補打卡申請單";
}

<div class="secion mt-2">
    <div class="card">
        <form method="post" id="app">
            <div class="card-header">

                <h3 class="card-title d-flex justify-content-between">
                    <span>補打卡申請</span>
                </h3>

            </div>
            <div class="card-body">

                <div class="row form-group basic">
                    <label class="col-form-label">申請人</label>
                    <input type="text" class="form-control" :value="name" readonly>

                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

                <div class="row form-group basic">
                    <label class="col-form-label">補打卡日期</label>
                    <input id="timeRange" name="dateRange" type="datetime" class="form-control" value="" autocomplete="off">
                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

                <template v-if="search.clockData && search.shiftData">

                    <div class="row form-group basic">
                        <div class="chip chip-media">
                            <i class="chip-icon bg-warning">
                                <ion-icon name="alarm" role="img" class="md hydrated" aria-label="alarm"></ion-icon>
                            </i>
                            <span class="chip-label">當日打卡時間：{{ search.clockStart }} - {{ search.clockEnd }}</span>
                        </div>
                    </div>

                    <div class="row form-group basic">

                        <div class="chip chip-media">
                            <i class="chip-icon bg-warning">
                                <ion-icon name="alarm" role="img" class="md hydrated" aria-label="alarm"></ion-icon>
                            </i>
                            <span class="chip-label">當日班表時間：{{ search.shiftStart }} - {{ search.shiftEnd }}</span>
                        </div>
                    </div>
                </template>

                <div class="form-group basic">
                    <div class="input-wrapper">
                        <label class="col-form-label">補卡時段</label>
                        <select class="form-control select2 select2-hidden-accessible"
                                style="width: 100%;" data-select2-id="1" tabindex="-1"
                                aria-hidden="true" v-model.number="status">
                            <option value="">---請選擇---</option>
                            <option v-for="item in clockStatusSelectItems" :value="item.value">{{item.text}}</option>
                        </select>
                        <span class="select2 select2-container select2-container--default select2-container--below select2-container--focus"
                              dir="ltr" style="width: 100%;">
                            <span class="selection"></span>
                        </span>
                        <span class="text-danger" v-if="!dataValid.status">補卡時段不得為空!</span>
                    </div>
                </div>

                <div class="row form-group basic">
                    <label class="col-form-label">補打卡原因</label>
                    <textarea class="form-control" rows="3"
                              control-id="ControlID-13" v-model="reason"></textarea>
                    <i class="clear-input">
                        <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                    </i>
                </div>

            </div>
            <div class="card-footer">
                <div class="row justify-content-around">
                    <button type="button" class="btn btn-facebook" @@click="checkCompStatus">
                        <ion-icon name="checkmark-done-outline" role="img"
                        class="md hydrated" aria-label="checkmark done outline"></ion-icon>送出
                    </button>
                    <button type="button" class="btn btn-dribbble" @@click="toList">
                        <ion-icon name="close-outline" role="img"
                                  class="md hydrated" aria-label="close outline"></ion-icon>瀏覽單據
                    </button>
                </div>

            </div>
        </form>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedSuccess" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-success">
                    <ion-icon name="checkmark-circle" role="img" class="md hydrated" aria-label="checkmark circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出成功</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="successBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedDanger" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-danger">
                    <ion-icon name="close-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">送出失敗</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="dangerBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {

    <script>
        Vue.createApp({
            data() {
                return {
                    clockStatusSelectItems: [],
                    EmpId: '',
                    name: '',
                    status: null,
                    reason: '',
                    shifts: [],
                    date: '',
                    search: {
                        date: '',
                        shiftStart: '',
                        shiftEnd: '',
                        clockStart: '',
                        clockEnd: '',
                        shiftData: false,
                        clockData: false,
                    },
                    dataValid: {
                        status: true,
                    }
                }
            },
            mounted() {
                this.date = this.getToday();
                this.getNameAndId();
                this.getDropDownList();
                this.getDate();

            },
            methods: {
                getNameAndId() {
                    let self = this;
                    fetch("/mobile/api/Complement/GetEmployeeName").then(res => res.json()).then(result => {
                        self.name = result.employeeName;
                        self.employeesId = result.employeeId;
                    })
                },
                getDropDownList() {
                    fetch("/mobile/api/Complement/DropDownList").then(res => res.json())
                        .then(result => {
                            this.clockStatusSelectItems = result.clockStatusSelectItems;
                        });
                },
                getDate() {
                    let self = this;
                    $('#timeRange').daterangepicker({
                        "startDate": self.getToday(),
                        singleDatePicker: true,
                        timePicker: false,
                        locale: {
                            format: 'YYYY-MM-DD'
                        }
                    },
                        function (start, _, _) {
                            self.date = start.format('YYYY-MM-DD');
                            self.getClockAndShifts();
                        }
                    );
                },
                getToday() {
                    return moment().format('YYYY-MM-DD');
                },
                isValid(dateString) {
                    const isValidData = Date.parse(dateString);
                    return !isNaN(isValidData);
                },
                formatDate(dateString) {
                    const options = {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                    };
                    const date = new Date(dateString);
                    return date.toLocaleDateString('zh-TW', options);
                },
                formatDateTime(dateTimeString) {
                    const options = {
                        hour: '2-digit',
                        minute: '2-digit'
                    };
                    const dateTime = new Date(dateTimeString);
                    return dateTime.toLocaleTimeString('zh-TW', options);
                },
                getClockAndShifts() {
                    let self = this;

                    axios.all([
                        axios("/mobile/api/Shift/Schedule"),
                        axios("/mobile/api/Complement/GetEmpClocks")
                    ])
                        .then(axios.spread(function (response1, response2) {
                            console.log(response2.data);
                            response1.data.forEach(item => {
                                const startDate = item.start.split('T')[0];
                                const startTime = item.start.split('T')[1];
                                const endTime = item.end.split('T')[1];
                                if (startDate === self.date) {
                                    self.search.date = startDate;
                                    self.search.shiftStart = startTime;
                                    self.search.shiftEnd = endTime;
                                    self.search.shiftData = true;

                                }
                            });

                            response2.data.forEach(item => {

                                const clockDate = item.date;
                                const startTime = item.on;
                                const endTime = item.off;

                                if (clockDate === self.date) {
                                    self.search.clockData = true;
                                    self.search.clockStart = startTime;
                                    self.search.clockEnd = endTime;

                                }
                            });
                            console.log("self.search.shiftData " + self.search.shiftData);
                            console.log("self.search.shiftStart " + self.search.shiftStart);
                            console.log("self.search.shiftEnd " + self.search.shiftEnd);

                            console.log("self.search.clockData " + self.search.clockData);
                            console.log("self.search.clockStart " + self.search.clockStart);
                            console.log("self.search.clockEnd " + self.search.clockEnd);
                        }));
                },
                checkCompStatus() {
                    let self = this;
                    console.log(self.status);
                    console.log(self.dataValid.status);
                    if (self.status == null) {
                        self.dataValid.status = false;
                    } else {
                        self.dataValid.status = true;
                        self.send();
                    }
                },
                send() {
                    let self = this;

                    axios.post("/mobile/api/Complement/CompRequestCreate", {
                        employeesId: self.employeesId,
                        additionalTime: self.date,
                        status: self.status,
                        reason: self.reason,
                    }).then(response => {
                        if (response.data == true) {
                            $('#DialogIconedSuccess').modal('show');
                            $('#successBack').click(function () {
                                $('#DialogIconedSuccess').modal('hide');
                                window.location.href = "/employee/query/Complement";
                            });
                        } else {
                            $('#DialogIconedDanger').modal('show');
                            $('#dangerBack').click(function () {
                                $('#DialogIconedDanger').modal('hide');
                            });
                        }
                    });
                },
                toList() {
                    location.href = "/employee/query/Complement";
                },
            }
        }).mount("#app");
    </script>
}