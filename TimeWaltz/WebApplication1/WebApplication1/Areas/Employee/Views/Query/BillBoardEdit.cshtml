@{
    ViewBag.title = "編輯公佈欄";
}

@section Styles
{
    <style>
        .ck-editor__editable {
            min-height: 500px;
        }
    </style>
}


<div class="secion mt-2" id="app">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title d-flex justify-content-between">
                <span>編輯公佈欄</span>
            </h3>
        </div>
        <div class="card-body">
            <div class="row form-group basic">
                <label class="col-form-label">主旨：</label>
                <input type="text" class="form-control" v-model="title">
                <span class="text-danger font-weight-bold col-form-label" v-if="!dataValid.title">請輸入主旨</span>
            </div>
            <div class="row form-group basic">
                <label class="col-form-label">公告期間：</label>
                <input id="timeRange" type="datetime" class="form-control">
            </div>
            <div class="row form-group basic">
                <label class="col-form-label">發布人：</label>
                <input type="text" class="form-control" v-model="empName" readonly>
            </div>
            <div class="form-group basic">
                <label class="col-form-label">內容：</label>
                <textarea style="height:max-content" ref="editor" v-model="content"></textarea>
            </div>
        </div>
        <div class="card-footer">
            <div class="row justify-content-around">
                <button type="button" class="btn btn-facebook" @@click="checkIsValidData">
                    <ion-icon name="checkmark-done-outline" role="img"
                              class="md hydrated" aria-label="checkmark done outline">
                    </ion-icon>送出
                </button>
                <button type="button" class="btn btn-dribbble" @@click="toList">
                    <ion-icon name="close-outline" role="img"
                              class="md hydrated" aria-label="close outline">
                    </ion-icon>瀏覽單據
                </button>
            </div>
        </div>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedSuccess" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-success">
                    <ion-icon name="checkmark-circle" role="img" class="md hydrated" aria-label="checkmark circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">修改成功</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="successBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade dialogbox" id="DialogIconedDanger" data-backdrop="static" tabindex="-1" role="dialog" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-icon text-danger">
                    <ion-icon name="checkmark-circle" role="img" class="md hydrated" aria-label="close circle"></ion-icon>
                </div>
                <div class="modal-header">
                    <h5 class="modal-title">修改失敗</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <div class="btn-inline">
                        <a href="#" class="btn" data-dismiss="modal" id="dangerBack">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="/js/ckeditor.js"></script>
    <script>
        Vue.createApp({
            data() {
                return {
                    postId: "",
                    empName: '',
                    startTime: '',
                    endTime: '',
                    content: '',
                    title: '',
                    dataValid: {
                        title: true,
                    }
                }
            },
            methods: {
                getEmpId() {
                    let self = this;
                    fetch("/mobile/api/Overtime/GetEmployeeName").then(res => res.json())
                        .then(result => {
                            self.empName = result.employeeName;
                        })
                },
                getTimeRange() {
                    let self = this;
                    $('#timeRange').daterangepicker({
                        "startDate": moment(self.startTime),
                        "endDate": moment(self.endTime),
                        timePicker: true,
                        timePickerIncrement: 15,
                        locale: {
                            format: 'YYYY-MM-DD HH:mm'
                        }
                    },
                        function (start, end, _) {
                            self.startTime = start;
                            self.endTime = end;
                        });
                },
                showCkEditor() {
                    let self = this;
                    ClassicEditor.create(self.$refs.editor, {
                        toolbar: {
                            items: ['undo', 'redo',
                                '|', 'heading',
                                '|', 'bold', 'italic',
                                '|', 'link', 'insertTable',
                                '|', 'Blockquote',
                                '|', 'bulletedList', 'numberedList',
                                '|', 'outdent', 'indent']
                        }
                    })
                        .then(editor => {
                            editor.ui.view.editable.element.style.height = '500px';
                            editor.setData(self.content);
                            editor.model.document.on('change:data', () => {
                                self.content = editor.getData();
                            });
                        })
                        .catch(error => {
                            console.error('There was a problem initializing the editor', error);
                        });
                },
                checkIsValidData() {
                    let isValid = true;
                    let self = this;
                    self.dataValid.title = self.title == '' ? false : true;
                    if (self.dataValid.title) {
                        this.sendBillBoard();
                    }
                },
                sendBillBoard() {
                    let self = this;
                    console.log(self.content)
                    axios.post("/mobile/api/Billboard/Edit", {
                        startTime: self.startTime,
                        endTime: self.endTime,
                        content: self.content,
                        title: self.title,
                        id:self.postId,
                    }).then(response => {
                        if (response.data == true) {
                            $('#DialogIconedSuccess').modal('show');
                            $('#successBack').click(function () {
                                $('#DialogIconedSuccess').modal('hide');
                                window.location.href = "/employee/query/BillBoard";
                            });
                        } else {
                            $('#DialogIconedDanger').modal('show');
                            $('#dangerBack').click(function () {
                                $('#DialogIconedDanger').modal('hide');
                            });
                        }
                    });
                },
                toList() {
                    location.href = "/employee/query/BillBoard";
                },
                getBillboardData() {
                    let self = this;
                    axios(`/mobile/api/Billboard/GetBillBoardData/${self.postId}`).then(response => {
                        console.log(response);
                        self.empId = response.data.employeesID;
                        self.startTime = response.data.startTime;
                        self.endTime = response.data.endTime;
                        // self.originData.startTime = response.data.startTime;
                        // self.originData.endTime = response.data.endTime;
                        self.content = response.data.content;
                        self.title = response.data.title;
                        // self.getTimeRange();
                        // self.showCkEditor();
                    })
                        .then(() => self.getTimeRange())
                        .then(() => self.showCkEditor());
                },
                checkId() {
                    var url = location.pathname;
                    var match = url.match(/\/(\d+)$/);

                    if (match) {
                        var lastNumber = parseInt(match[1]);
                        this.postId = lastNumber;

                    } else {
                        location.href = "/employee/query/BillBoard";
                    }
                },
            },
            mounted() {
                this.checkId();
                this.getBillboardData();
                this.getEmpId();
            }
        }).mount("#app");
    </script>
}