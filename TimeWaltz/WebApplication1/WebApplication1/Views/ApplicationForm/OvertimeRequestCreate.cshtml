@{
    ViewBag.title = "加班申請單";
}
<div class="row" id="app">
    <div class="col-md">
        <div class="card-body">
            <div class="row mb-2">
                <label class="col-form-label">申請人：</label>
                <input type="text" class="col-sm-2 form-control" v-model="empName" readonly>
                <div class="col-sm-auto ml-auto">
                    <label class="border rounded border-success  text-green p-1 pull-right">編輯中</label>
                </div>
            </div>

            <div class="row mb-2">
                <label class="col-form-label">加班期間：</label>
                <input id="timeRange" type="datetime" class="form-control col-6">
                <span class="text-danger font-weight-bold col-form-label" v-if="!dataValid.overtimeResult">請選擇加班期間</span>

            </div>

            <div class="row mb-2" v-if="isValid(startTime)">
                <label class="col-form-label text-green">加班時數：{{ overtimeResult }}</label>
            </div>

            <div class="row mb-2">
                <div class="input-group">
                    <div class="input-group-prepend mr-1">
                        <span class="input-group-text">
                            <input type="checkbox" id="ovetimeCheck" v-model="status">
                        </span>
                    </div>
                    <label for="ovetimeCheck" class="mb-0" style="">加班轉補休</label>
                </div>
            </div>

            <div class="row mb-2">
                <label class="col-form-label">加班原因：</label>
                <textarea cols="5" rows="5" class="form-control" v-model="reason"></textarea>
                <span class="text-danger font-weight-bold" v-if="!dataValid.reason">請說明加班原因</span>
            </div>

        </div>
        <div class="card-footer">
            <input type="button" @@click="checkIsValidData" class="btn btn-outline-primary" value="送出" />
            <input type="button" @@click="toList" class="btn btn-outline-dark" value="取消" />
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js" integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        Vue.createApp({
            data() {
                return {
                    empName: '',
                    startTime: '',
                    endTime: '',
                    status: false,
                    reason: '',
                    overtimeResult: '',
                    dataValid: {
                        startTime: true,
                        endTime: true,
                        reason: true,
                        overtimeResult: true,
                    }
                }
            },
            methods: {
                getEmpId() {
                    let self = this;
                    fetch(`/api/OvertimeApplicationsApi/GetEmoloyeeName`).then(res => res.json())
                        .then(result => {
                            self.empName = result.employeeName;
                        })
                },
                toList() {
                    location.href = "/ApplicationForm/OvertimeRequest";
                },

                getTimeRange() {
                    let self = this;
                    var options = {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric'
                    };

                    $('#timeRange').daterangepicker({
                        "startDate": this.getToday(),
                        "endDate": this.getToday(),
                        timePicker: true,
                        timePickerIncrement: 15,
                        locale: {
                            format: 'YYYY-MM-DD HH:mm'
                        }
                    },
                        function (start, end, _) {
                            self.startTime = start;
                            self.endTime = end;
                            self.countOvertimeMins();
                        });
                },
                getToday() {
                    return moment().format("YYYY-MM-DD HH:mm")
                },
                countOvertimeMins() {
                    let self = this;
                    self.overtimeResult = '';
                    if (self.startTime && self.endTime) {
                        const start = self.startTime;
                        const end = self.endTime;
                        const durationMilliseconds = end - start;
                        const durationMinutes = Math.floor(durationMilliseconds / (60 * 1000));
                        const hours = Math.floor(durationMinutes / 60);
                        const minutes = durationMinutes % 60;
                        if (hours === 0) {
                            self.overtimeResult = `${minutes} 分鐘`;
                        } else if (minutes === 0) {
                            self.overtimeResult = `${hours} 小時`;
                        } else {
                            self.overtimeResult = `${hours} 小時 ${minutes} 分鐘`;
                        }
                    } else {
                        self.overtimeResult = '';
                    }
                },
                checkIsValidData() {
                    let isValid = true;
                    let self = this;
                    self.dataValid.overtimeResult = self.overtimeResult == '' ? false : true;
                    self.dataValid.reason = self.reason == '' ? false : true;
                    if (self.dataValid.overtimeResult && self.dataValid.reason) {
                        this.sendOvertimeRequest();
                    }
                },
                sendOvertimeRequest() {
                    let self = this;
                    self.startTime = self.startTime.utc(true).toISOString();
                    self.endTime = self.endTime.utc(true).toISOString();

                    axios.post("/api/OvertimeApplicationsApi/Create", {
                        startTime: self.startTime,
                        endTime: self.endTime,
                        reason: self.reason,
                        status: self.status,
                    }).then(response => {
                        if (response.data == true) {
                            Swal.fire({
                                icon: "success",
                                title: "新增成功!",
                                confirmButtonText: '返回',
                                showClass: {
                                    popup: `animate__animated animate__fadeInUp animate__faster`
                                },
                                hideClass: {
                                    popup: `animate__animated animate__fadeOutDown animate__faster`
                                }
                            }).then((result) => {
                                if (result.value) {
                                    location.href = "/ApplicationForm/OvertimeRequest";
                                }
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "新增失敗!",
                                confirmButtonText: '返回',
                                showClass: {
                                    popup: `animate__animated animate__fadeInUp animate__faster`
                                },
                                hideClass: {
                                    popup: `animate__animated animate__fadeOutDown animate__faster`
                                }
                            });
                        }
                    });
                },
                isValid(string) {
                    const isValidData = Date.parse(string);
                    return !isNaN(isValidData);
                },
            },
            mounted() {
                this.getEmpId();
                this.getTimeRange();
            }
        }).mount("#app");
    </script>
}