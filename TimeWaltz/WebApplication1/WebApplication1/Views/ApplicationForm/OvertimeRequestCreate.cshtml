@{
    ViewBag.title = "加班申請單";
}
@model WebApplication1.Models.ApplicationFormViewModels.OvertimeCreateViewModel
<form asp-controller="ApplicationForm" asp-action="OvertimeRequestCreate" method="post">
    <div class="row" id="app">
        <div class="col-md">
            <div class="card-body">
                <div class="row mb-2">
                    <label class="col-form-label">申請人：</label>
                    <input type="hidden" v-model="empId" asp-for="EmployeesId" :value="empId">
                    <input type="text" class="col-sm-2 form-control" v-model="empName" readonly>
                    <div class="col-sm-auto ml-auto">
                        <button class="btn btn-outline-info pull-right">編輯中</button>
                    </div>
                </div>

                <div class="row mb-2">
                    <label class="col-form-label text-danger">加班期間：</label>
                    <input id="timeRange" name="dateRange" type="datetime" class="form-control col-6" value="">
                    <input type="hidden" id="startTimeValue" v-model="startTime" asp-for="StartTime" />
                    <input type="hidden" id="endTimeValue" v-model="endTime" asp-for="EndTime" />

                </div>

                <div class="row mb-2" v-if="isValid(startTime)">
                    <label class="col-form-label text-green">加班時數：{{ overtimeResult }}</label>
                </div>

                <div class="row mb-2">
                    <div class="input-group">
                        <div class="input-group-prepend mr-1">
                            <span class="input-group-text" :class="inputGroupText">
                                <input type="checkbox" id="ovetimeCheck" v-model="status" asp-for="Status">
                            </span>
                        </div>
                        <label for="ovetimeCheck" class="mb-0" style="" :style="inputGroupText">加班轉補休</label>
                    </div>
                </div>

                <div class="row mb-2">
                    <label class="col-form-label">加班原因：</label>
                    <textarea cols="5" rows="5" class="form-control" v-model="reason" asp-for="Reason"></textarea>
                </div>

            </div>
            <div class="card-footer">
                @* <input v-on:click="send" type="button" value="送出" class="btn btn-outline-primary" /> *@
                <button type="submit" class="btn btn-outline-primary">送出</button>
                <input type="button" class="btn btn-outline-dark" value="取消" />
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        Vue.createApp({
            data() {
                return {
                    empId: 1,
                    empName: '',
                    overtimeResult: '',
                    date: '',
                    startTime: '',
                    endTime: '',
                    status: false,
                    reason: '',
                    inputGroupText: {
                        "rounded": "true",
                    },
                }
            },
            mounted() {
                this.getEmpId();
                this.getTimeRange();
            },
            methods: {
                getEmpId() {
                    let self = this;
                    fetch(`/api/EmployeesApi/GetEmpIdName/${self.empId}`).then(res => res.json())
                        .then(result => {
                            self.empId = result.id;
                            self.empName = result.name;
                        })
                },
                getTimeRange() {
                    let self = this;
                    $('#timeRange').daterangepicker({
                        "startDate": this.getToday(),
                        "endDate": this.getToday(),
                        timePicker: true,
                        timePickerIncrement: 15,
                        locale: {
                            format: 'YYYY-MM-DD HH:mm'
                        }
                    },
                        function (start, end, _) {
                            self.startTime = start.format('YYYY-MM-DD HH:mm');
                            self.endTime = end.format('YYYY-MM-DD HH:mm');
                            self.countOvertimeMins();
                        });

                },
                getToday() {
                    return moment().format("YYYY-MM-DD HH:mm")
                },
                countOvertimeMins() {
                    this.overtimeResult = '';
                    console.log(this.startTime, this.endTime)
                    if (this.startTime && this.endTime) {
                        const startTime = new Date(`${this.startTime}`);
                        const endTime = new Date(`${this.endTime}`);
                        const durationMilliseconds = endTime - startTime;
                        const durationMinutes = Math.floor(durationMilliseconds / (60 * 1000));
                        const hours = Math.floor(durationMinutes / 60);
                        const minutes = durationMinutes % 60;
                        if (hours === 0) {
                            this.overtimeResult = `${minutes} 分鐘`;
                        } else if (minutes === 0) {
                            this.overtimeResult = `${hours} 小時`;
                        } else {
                            this.overtimeResult = `${hours} 小時 ${minutes} 分鐘`;
                        }
                    } else {
                        this.overtimeResult = '';
                    }
                },
                isValid(dateString) {
                    const isValidData = Date.parse(dateString);
                    return !isNaN(isValidData);
                },
            }
        }).mount("#app");
    </script>
}