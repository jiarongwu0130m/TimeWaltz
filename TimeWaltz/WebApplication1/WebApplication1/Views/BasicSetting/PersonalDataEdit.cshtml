@{
    ViewData["Title"] = "員工資料 | ";
}


<div class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="m-0">編輯員工資料</h1>
            </div>
        </div>
    </div>
</div>
<section class="content">
    <div class="container-fluid">
        <div class="row" id="app">
            <div class="col-12">

                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="control-label">姓名</label>
                            <input class="form-control col-3" :class="validation.name" v-model="name" />
                            <span class="text-danger" v-if="!validation.name">姓名不得為空</span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">性別</label>
                            <select class="form-control col-3" v-model="gender">
                                <option v-for="item in genderSelectItems" :value="item.value">{{item.text}}</option>
                            </select>
                            <span class="text-danger" v-if="!validation.gender">性別不得為無</span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">E-mail</label>
                            <input type="email" class="form-control col-5" :class="validation.email" v-model.lazy="email" />
                            <div class="text-danger" v-if="!validation.emailFormat">
                                Email格式錯誤!
                            </div>
                            <div class="text-danger" v-if="!validation.email">
                                Email不可為空!
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">到職日期</label>
                            <input type="text" id="dateInput" class="form-control col-3" :value="hireDate" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">員工編號</label>
                            <input type="text" class="form-control col-3" v-model="employeesNo" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">部門</label>
                            <select class="form-control col-3" :class="validation.departmentId" v-model="departmentId">
                                <option v-for="item in departmentNameSelectItem" :value="item.value">{{item.text}}</option>
                            </select>
                            <span class="text-danger" v-if="!validation.departmentId">部門不得為空</span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">班別</label>
                            <select class="form-control col-3" v-model="shiftScheduleId">
                                <option v-for="item in shiftNameSelectItems" :value="item.value">{{item.text}}</option>
                            </select>
                            <span class="text-danger" v-if="!validation.shiftScheduleId">班別不得為空</span>
                        </div>
                    </div>
                    <div class="card-footer">
                        <input type="button" value="送出" class="btn btn-primary" @@click="send" />
                        <a href="/BasicSetting/PersonalData" class="btn btn-outline-dark">返回</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        Vue.createApp({
            data() {
                return {
                    id: null,
                    genderSelectItems: [],
                    departmentNameSelectItem: [],
                    shiftNameSelectItems: [],
                    shiftScheduleId: null,
                    hireDate: '',
                    employeesNo: '',
                    gender: '',
                    email: '',
                    name: '',
                    departmentId: '',
                    validation: {
                        employeesNo: true,
                        gender: true,
                        departmentId: true,
                        email: null,
                        name: true,
                        shiftScheduleId: true,
                        emailFormat: true,
                    },
                }
            },
            watch: {
                "email"(nval) { this.validation.email = nval == "" },
                "gender"(nval) { this.validation.gender = nval == "" },
                "departmentId"(nval) { this.validation.departmentId = nval == "" },
                "employeesNo"(nval) { this.validation.employeesNo = nval == "" },
                "name"(nval) { this.validation.name = nval == "" },
                "shiftScheduleId"(nval) { this.validation.shiftScheduleId = nval == "" },
                "emailFormat"(nval) { this.validation.emailFormat = nval.includes('@@') == "" },
            },
            methods: {
                validationForm() {
                    if (this.validation.email == "") { this.validation.email = true; return false; }
                    if (this.validation.gender == "") { this.validation.gender = true; return false; }
                    if (this.validation.departmentId == "") { this.validation.departmentId = true; return false; }
                    if (this.validation.employeesNo == -1) { this.validation.employeesNo = true; return false; }
                    if (this.validation.name == -1) { this.validation.name = true; return false; }
                    if (this.validation.shiftScheduleId == -1) { this.validation.shiftScheduleId = true; return false; }
                    if (this.validation.emailFormat == "") { this.validation.emailFormat = false; return true; }
                    return true;
                },
                getDateRangePicker() {
                    let self = this;
                    $('#dateInput').daterangepicker({
                        singleDatePicker: true,
                        locale: {
                            format: 'YYYY-MM-DD'
                        }
                    }, function (start, _, _) {
                        self.hireDate = start.format('YYYY-MM-DD')
                    });
                },
                // validateAndSubmit() {
                //     let isValid = true;
                //     this.validation.name = this.name == '' ? false : true;
                //     this.validation.gender = this.gender == '' ? false : true;
                //     this.validation.departmentId = this.departmentId == '' ? false : true;
                //     this.validation.employeesNo = this.employeesNo == '' ? false : true;
                //     this.validation.shiftScheduleId = this.shiftScheduleId == null ? false : true;
                //     this.validation.email = this.email == null ? false : true;
                //     if (this.validation.name && this.validation.gender && this.validation.departmentId && this.validation.employeesNo && this.validation.email) {
                //         this.send();
                //     }
                // },
                send() {

                    if (this.validationForm()) {
                        let self = this;
                        fetch(`/api/PersonalDataApi/Edit/${self.id}`, {
                            method: "POST",
                            body: JSON.stringify({
                                id: self.id,
                                name: self.name,
                                email: self.email,
                                gender: self.gender,
                                departmentId: self.departmentId,
                                shiftScheduleId: self.shiftScheduleId,
                                employeesNo: self.employeesNo,
                                hireDate: self.hireDate,

                            }),
                            headers: {
                                "content-type": "application/json",
                            },
                        }).then(res => res.json()).then(result => {
                            console.log(result)
                            if (result.status) {
                                Swal.fire({
                                    icon: "success",
                                    title: "修改成功!",
                                    confirmButtonText: '返回',
                                    showClass: {
                                        popup: `animate__animated animate__fadeInUp animate__faster`
                                    },
                                    hideClass: {
                                        popup: `animate__animated animate__fadeOutDown animate__faster`
                                    }
                                }).then((result) => {
                                    if (result.value) {
                                        location.href = "/BasicSetting/PersonalData";
                                        this.getListData();
                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: "error",
                                    title: "修改失敗!",
                                    confirmButtonText: '返回',
                                    showClass: {
                                        popup: `animate__animated animate__fadeInUp animate__faster`
                                    },
                                    hideClass: {
                                        popup: `animate__animated animate__fadeOutDown animate__faster`
                                    }
                                });
                            }
                        });
                    }
                    
                },
                getDropDownListData() {
                    let self = this;
                    axios.all([
                        axios("/api/PersonalDataApi/GetDepAndShiftDorpDownList"),
                        axios("/api/PersonalDataApi/DropDownList")
                    ]).then(axios.spread((response1, response2) => {
                        self.departmentNameSelectItem = response1.data.departmentNameSelectItem;
                        self.shiftNameSelectItems = response1.data.shiftNameSelectItems;
                        self.genderSelectItems = response2.data.genderSelectItems;
                    }));
                },
                getEditData() {
                    let self = this;
                    fetch(`/api/PersonalDataApi/GetEditData/${this.id}`).then(res => res.json()).then(result => {
                        self.departmentId = result.departmentId;
                        self.email = result.email;
                        self.id = result.id;
                        self.name = result.name;
                        self.hireDate = new moment(result.hireDate).format('YYYY-MM-DD');
                        self.employeesNo = result.employeesNo;
                        self.gender = result.gender;
                        self.shiftScheduleId = result.shiftScheduleId;
                    });
                },
                checkId() {
                    var url = location.pathname;
                    var match = url.match(/\/(\d+)$/);

                    if (match) {
                        var lastNumber = parseInt(match[1]);
                        this.id = lastNumber;
                    } else {
                        location.href = "/BasicSetting/PersonalData";
                    }
                },
            },
            mounted() {
                this.checkId();
                this.getDateRangePicker();
                this.getEditData();
                this.getDropDownListData();
            },
        }).mount('#app');
    </script>

}